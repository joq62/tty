%%% -------------------------------------------------------------------
%%% Author  : uabjle
%%% 
%%% Created : 10 dec 2012
%%% -------------------------------------------------------------------
-module(tty_server). 

-behaviour(gen_server).

%% --------------------------------------------------------------------
%% Include files
%% --------------------------------------------------------------------
% -include("").
%% --------------------------------------------------------------------
-define(PollInterval,1*1000).

%% External exports



-export([init/1, handle_call/3,handle_cast/2, handle_info/2, terminate/2, code_change/3]).

-record(state, {status
	       }).

%% ====================================================================
%% External functions
%% ====================================================================

%% ====================================================================
%% Server functions
%% ====================================================================

%% --------------------------------------------------------------------
%% Function: init/1
%% Description: Initiates the server
%% Returns: {ok, State}          |
%%          {ok, State, Timeout} |
%%          ignore               |
%%          {stop, Reason}
%% --------------------------------------------------------------------
init([]) ->
    ok=application:start(sd),
    spawn(fun()-> do_poll() end),
    {ok, #state{status=oam_not_started}
    }.

%% --------------------------------------------------------------------
%% Function: handle_call/3
%% Description: Handling call messages
%% Returns: {reply, Reply, State}          |
%%          {reply, Reply, State, Timeout} |
%%          {noreply, State}               |
%%          {noreply, State, Timeout}      |
%%          {stop, Reason, Reply, State}   | (terminate/2 is called)
%%          {stop, Reason, State}            (terminate/2 is called)
%% --------------------------------------------------------------------
handle_call({connect,ControllerNode},_From,State) ->
    io:format("connect,ControllerNode ~p~n",[{connect,ControllerNode,?MODULE,?FUNCTION_NAME,?LINE}]),
    Reply=case rpc:call(node(),terminal,start,[ControllerNode],2*5*1000) of
	      {badrpc,Reason}->
		  NewState=State,
		  {badrpc,Reason};
	      {ok,Pid}->
		  NewState=State#state{tty_pid=Pid},
		  ok;
	      ErrorReason->
		  NewState=State,
		  {error,ErrorReason}
	  end,
    {reply, Reply, NewState};

handle_call({exit},_From,State) ->
    io:format("exit ~p~n",[{?MODULE,?FUNCTION_NAME,?LINE}]),
    Reply=case State#state.tty_pid of
	      not_a_pid->
		  NewState=State,
		  {error,[not_a_pid]};
	      Pid->
		  case is_pid(Pid) of
		      false->
			  NewState=State,
			  {error,[not_a_pid,Pid]};
		      true->
			  Pid!exit,
			  NewState=State#state{tty_pid=not_a_pid},
			  ok
		  end
	  end,
    {reply, Reply, NewState};

handle_call({ping},_From,State) ->
    Reply={pong,node(),?MODULE},
    {reply, Reply, State};

handle_call({stop}, _From, State) ->
    {stop, normal, shutdown_ok, State};

handle_call(Request, From, State) ->
    Reply = {unmatched_signal,?MODULE,Request,From},
    {reply, Reply, State}.

%% --------------------------------------------------------------------
%% Function: handle_cast/2
%% Description: Handling cast messages
%% Returns: {noreply, State}          |
%%          {noreply, State, Timeout} |
%%          {stop, Reason, State}            (terminate/2 is called)
%% --------------------------------------------------------------------


handle_cast(Msg, State) ->
    io:format("unmatched match cast ~p~n",[{Msg,?MODULE,?LINE,time()}]),
    {noreply, State}.

%% --------------------------------------------------------------------
%% Function: handle_info/2
%% Description: Handling all non call/cast messages
%% Returns: {noreply, State}          |
%%          {noreply, State, Timeout} |
%%          {stop, Reason, State}            (terminate/2 is called)
%% --------------------------------------------------------------------
handle_info(_Info, State) ->
    {noreply, State}.

%% --------------------------------------------------------------------
%% Function: terminate/2
%% Description: Shutdown the server
%% Returns: any (ignored by gen_server)
%% --------------------------------------------------------------------
terminate(_Reason, _State) ->
    ok.

%% --------------------------------------------------------------------
%% Func: code_change/3
%% Purpose: Convert process state when code is changed
%% Returns: {ok, NewState}
%% --------------------------------------------------------------------
code_change(_OldVsn, State, _Extra) ->
    {ok, State}.

%% --------------------------------------------------------------------
%%% Internal functions
%% --------------------------------------------------------------------

		  
